// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebRTC API

import { WebRTCService } from '../services/WebRTCService';
import { 
  createSignalingPackage, 
  createAnswerPackage,
  createCompactString,
  parseCompactString 
} from '../utils/signaling';
import { copyToClipboard, readFromClipboard } from '../utils/clipboard';

/**
 * –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
export async function basicConnectionExample() {
  const service = new WebRTCService();
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await service.createConnection();
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫
    const localStream = await service.getLocalStream();
    console.log('–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω:', localStream);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    service.on('onConnectionStateChange', (state) => {
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', state);
    });
    
    service.on('onRemoteStream', (stream) => {
      console.log('–ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫:', stream);
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await service.close();
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä 2: –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞
 */
export async function initiateCallExample() {
  const service = new WebRTCService();
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫
    await service.createConnection();
    await service.getLocalStream();
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ñ–µ—Ä
    const offer = await service.createOffer();
    console.log('–û—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω:', offer);
    
    // –ñ–¥–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è)
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü–æ–ª—É—á–∞–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    const iceCandidates = service.getIceCandidates();
    console.log('ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:', iceCandidates);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞
    const signalingPackage = createSignalingPackage(offer, iceCandidates);
    const compactString = createCompactString(signalingPackage);
    
    console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–º–µ–Ω–∞:', compactString);
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    await copyToClipboard(compactString);
    console.log('–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    
    return { service, compactString };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
    throw error;
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä 3: –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞
 */
export async function acceptCallExample(signalingData: string) {
  const service = new WebRTCService();
  
  try {
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    const packageData = parseCompactString(signalingData);
    if (!packageData || !packageData.offer) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫
    await service.createConnection();
    await service.getLocalStream();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const offer = {
      type: 'offer' as const,
      sdp: packageData.offer,
    };
    await service.setRemoteDescription(offer);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    const answer = await service.createAnswer();
    console.log('–û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω:', answer);
    
    // –ñ–¥–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü–æ–ª—É—á–∞–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    const iceCandidates = service.getIceCandidates();
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω—ã–π –ø–∞–∫–µ—Ç
    const answerPackage = createAnswerPackage(answer, iceCandidates);
    const compactString = createCompactString(answerPackage);
    
    console.log('–û—Ç–≤–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', compactString);
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    await copyToClipboard(compactString);
    console.log('–û—Ç–≤–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    
    return { service, compactString };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞:', error);
    throw error;
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
export async function completeConnectionExample(
  service: WebRTCService, 
  answerData: string
) {
  try {
    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const packageData = parseCompactString(answerData);
    if (!packageData || !packageData.answer) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ—Ç–≤–µ—Ç)
    const answer = {
      type: 'answer' as const,
      sdp: packageData.answer,
    };
    await service.setRemoteDescription(answer);
    
    // –î–æ–±–∞–≤–ª—è–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    if (packageData.iceCandidates) {
      for (const candidateData of packageData.iceCandidates) {
        const candidate = {
          candidate: candidateData,
          sdpMLineIndex: null,
          sdpMid: null,
          usernameFragment: undefined,
        };
        await service.addIceCandidate(candidate);
      }
    }
    
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    service.on('onConnectionStateChange', (state) => {
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', state);
      if (state === 'connected') {
        console.log('üéâ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      } else if (state === 'failed') {
        console.log('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å');
      }
    });
    
    service.on('onRemoteStream', (stream) => {
      console.log('üìπ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫');
    });
    
    return service;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä 5: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–≤–æ–Ω–∫–∞
 */
export async function fullCallCycleExample() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–≤–æ–Ω–∫–∞...');
  
  try {
    // –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç –∑–≤–æ–Ω–æ–∫
    console.log('üìû –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç –∑–≤–æ–Ω–æ–∫...');
    const { service: initiatorService, compactString: offerData } = 
      await initiateCallExample();
    
    // –®–∞–≥ 2: –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–≤–æ–Ω–æ–∫
    console.log('üì± –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–≤–æ–Ω–æ–∫...');
    const { service: receiverService, compactString: answerData } = 
      await acceptCallExample(offerData);
    
    // –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    console.log('üîó –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    await completeConnectionExample(initiatorService, answerData);
    
    // –®–∞–≥ 4: –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Ç–∞–∫–∂–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É (–¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏–∏)
    console.log('üîó –ü–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    await completeConnectionExample(receiverService, offerData);
    
    console.log('‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–≤–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return { initiatorService, receiverService };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ –∑–≤–æ–Ω–∫–∞:', error);
    throw error;
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä 6: –†–∞–±–æ—Ç–∞ —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞
 */
export async function clipboardExample() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testData = '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞';
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    const copySuccess = await copyToClipboard(testData);
    console.log('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:', copySuccess ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
    
    // –ß–∏—Ç–∞–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
    const clipboardData = await readFromClipboard();
    console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞:', clipboardData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const isMatch = clipboardData === testData;
    console.log('–î–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç:', isMatch);
    
    return isMatch;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞:', error);
    return false;
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 */
export async function errorHandlingExample() {
  const service = new WebRTCService();
  
  try {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∏
    service.on('onError', (error) => {
      console.error('WebRTC –æ—à–∏–±–∫–∞:', error);
    });
    
    service.on('onConnectionStateChange', (state) => {
      if (state === 'failed') {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å');
      }
    });
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫–∞
    await service.createConnection();
    
    // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫–∞
    await service.createOffer();
    
  } catch (error) {
    console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –æ—à–∏–±–∫–∞:', error);
  } finally {
    await service.close();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
export const examples = {
  basicConnection: basicConnectionExample,
  initiateCall: initiateCallExample,
  acceptCall: acceptCallExample,
  completeConnection: completeConnectionExample,
  fullCallCycle: fullCallCycleExample,
  clipboard: clipboardExample,
  errorHandling: errorHandlingExample,
};
